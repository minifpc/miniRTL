
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COLON COMMA DIVIDE DOT END IDENTIFIER INTEGER LPAREN MINUS NUMBER PLUS PROGRAM REAL RPAREN SEMICOLON TIMES VARprogram : PROGRAM IDENTIFIER SEMICOLON block DOTblock : var_declaration BEGIN statement_list_or_empty ENDvar_declaration : VAR var_list SEMICOLON\n| emptyvar_list : IDENTIFIER COLON type\n| var_list COMMA IDENTIFIER COLON typetype : INTEGER\n| REALstatement_list_or_empty : statement_list\n| emptystatement_list : statement SEMICOLON\n| statement_list statement SEMICOLONstatement : IDENTIFIER ASSIGN expressionexpression : expression PLUS term\n| expression MINUS term\n| termterm : term TIMES factor\n| term DIVIDE factor\n| factorfactor : NUMBER\n| LPAREN expression RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,],[0,-1,]),'IDENTIFIER':([2,7,10,14,19,23,29,],[3,12,17,17,25,-11,-12,]),'SEMICOLON':([3,11,16,22,26,27,28,30,31,32,33,41,42,43,44,45,46,],[4,18,23,29,-5,-7,-8,-13,-16,-19,-20,-6,-14,-15,-17,-18,-21,]),'VAR':([4,],[7,]),'BEGIN':([4,6,8,18,],[-22,10,-4,-3,]),'DOT':([5,21,],[9,-2,]),'END':([10,13,14,15,23,29,],[-22,21,-9,-10,-11,-12,]),'COMMA':([11,26,27,28,41,],[19,-5,-7,-8,-6,]),'COLON':([12,25,],[20,35,]),'ASSIGN':([17,],[24,]),'INTEGER':([20,35,],[27,27,]),'REAL':([20,35,],[28,28,]),'NUMBER':([24,34,36,37,38,39,],[33,33,33,33,33,33,]),'LPAREN':([24,34,36,37,38,39,],[34,34,34,34,34,34,]),'PLUS':([30,31,32,33,40,42,43,44,45,46,],[36,-16,-19,-20,36,-14,-15,-17,-18,-21,]),'MINUS':([30,31,32,33,40,42,43,44,45,46,],[37,-16,-19,-20,37,-14,-15,-17,-18,-21,]),'RPAREN':([31,32,33,40,42,43,44,45,46,],[-16,-19,-20,46,-14,-15,-17,-18,-21,]),'TIMES':([31,32,33,42,43,44,45,46,],[38,-19,-20,38,38,-17,-18,-21,]),'DIVIDE':([31,32,33,42,43,44,45,46,],[39,-19,-20,39,39,-17,-18,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'var_declaration':([4,],[6,]),'empty':([4,10,],[8,15,]),'var_list':([7,],[11,]),'statement_list_or_empty':([10,],[13,]),'statement_list':([10,],[14,]),'statement':([10,14,],[16,22,]),'type':([20,35,],[26,41,]),'expression':([24,34,],[30,40,]),'term':([24,34,36,37,],[31,31,42,43,]),'factor':([24,34,36,37,38,39,],[32,32,32,32,44,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOLON block DOT','program',5,'p_program','pasyacc.py',8),
  ('block -> var_declaration BEGIN statement_list_or_empty END','block',4,'p_block','pasyacc.py',13),
  ('var_declaration -> VAR var_list SEMICOLON','var_declaration',3,'p_var_declaration','pasyacc.py',18),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','pasyacc.py',19),
  ('var_list -> IDENTIFIER COLON type','var_list',3,'p_var_list','pasyacc.py',24),
  ('var_list -> var_list COMMA IDENTIFIER COLON type','var_list',5,'p_var_list','pasyacc.py',25),
  ('type -> INTEGER','type',1,'p_type','pasyacc.py',33),
  ('type -> REAL','type',1,'p_type','pasyacc.py',34),
  ('statement_list_or_empty -> statement_list','statement_list_or_empty',1,'p_statement_list_or_empty','pasyacc.py',40),
  ('statement_list_or_empty -> empty','statement_list_or_empty',1,'p_statement_list_or_empty','pasyacc.py',41),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','pasyacc.py',46),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list','pasyacc.py',47),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement','pasyacc.py',51),
  ('expression -> expression PLUS term','expression',3,'p_expression','pasyacc.py',56),
  ('expression -> expression MINUS term','expression',3,'p_expression','pasyacc.py',57),
  ('expression -> term','expression',1,'p_expression','pasyacc.py',58),
  ('term -> term TIMES factor','term',3,'p_term','pasyacc.py',67),
  ('term -> term DIVIDE factor','term',3,'p_term','pasyacc.py',68),
  ('term -> factor','term',1,'p_term','pasyacc.py',69),
  ('factor -> NUMBER','factor',1,'p_factor','pasyacc.py',78),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','pasyacc.py',79),
  ('empty -> <empty>','empty',0,'p_empty','pasyacc.py',87),
]
